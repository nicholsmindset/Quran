openapi: 3.0.3
info:
  title: Quran Verse Challenge API
  version: 0.1.0
  description: API for daily quizzes, attempts, moderation, and assignments
servers:
  - url: https://api.example.com
    description: Production
  - url: http://localhost:3000
    description: Local
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Verse:
      type: object
      properties:
        id: { type: integer }
        surah: { type: integer }
        ayah: { type: integer }
        arabic_text: { type: string }
        translation_en: { type: string }
    Question:
      type: object
      properties:
        id: { type: string, format: uuid }
        verse_id: { type: integer }
        prompt: { type: string }
        choices:
          type: array
          items: { type: string }
        answer: { type: string }
        difficulty: { type: integer, minimum: 1, maximum: 5 }
        approved_at: { type: string, format: date-time, nullable: true }
    Attempt:
      type: object
      properties:
        id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        question_id: { type: string, format: uuid }
        session_id: { type: string, format: uuid, nullable: true }
        response: { type: string, nullable: true }
        correct: { type: boolean, nullable: true }
        answered_at: { type: string, format: date-time }
    Group:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
    Assignment:
      type: object
      properties:
        id: { type: string, format: uuid }
        group_id: { type: string, format: uuid }
        title: { type: string }
        due_at: { type: string, format: date-time, nullable: true }
    DailyQuiz:
      type: object
      properties:
        quiz_date: { type: string, format: date }
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
paths:
  /v1/quiz/daily:
    get:
      summary: Get daily quiz questions (5 approved questions)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyQuiz'
  /v1/quiz/resume:
    get:
      summary: Get current quiz session progress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string, format: uuid }
                  answered:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attempt'
  /v1/quiz/attempts:
    post:
      summary: Record an answer attempt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question_id, response]
              properties:
                question_id: { type: string, format: uuid }
                session_id: { type: string, format: uuid, nullable: true }
                response: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attempt'
  /v1/groups:
    post:
      summary: Create a new group (teacher)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /v1/groups/{groupId}/assignments:
    post:
      summary: Create an assignment for a group (teacher)
      parameters:
        - in: path
          name: groupId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title: { type: string }
                due_at: { type: string, format: date-time, nullable: true }
                question_ids:
                  type: array
                  items: { type: string, format: uuid }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
    get:
      summary: List assignments for a group (member)
      parameters:
        - in: path
          name: groupId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
  /v1/moderation/questions/pending:
    get:
      summary: List questions pending scholar approval
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /v1/moderation/questions/{id}/approve:
    post:
      summary: Approve a question (scholar/admin)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content