name: Production Deployment

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}

      - name: Build production bundle
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_KEY }}
          OPENAI_API_KEY: ${{ secrets.PRODUCTION_OPENAI_API_KEY }}

      - name: Bundle size analysis
        run: |
          npm run build
          echo "üì¶ Bundle analysis complete"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency vulnerability scan
        run: npm audit --audit-level=high

      - name: Check for high-severity vulnerabilities
        run: |
          if npm audit --audit-level=high | grep -q "found.*vulnerabilities"; then
            echo "‚ùå High severity vulnerabilities found!"
            exit 1
          else
            echo "‚úÖ No high severity vulnerabilities found"
          fi

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, security-audit]
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_KEY }}
          OPENAI_API_KEY: ${{ secrets.PRODUCTION_OPENAI_API_KEY }}

      - name: Deploy to Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Health check
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          echo "‚úÖ Production health check passed"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run critical path E2E tests
        run: npm run test:e2e -- --grep="critical"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ secrets.PRODUCTION_URL }}

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run performance audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ secrets.PRODUCTION_URL }}
            ${{ secrets.PRODUCTION_URL }}/auth/login
            ${{ secrets.PRODUCTION_URL }}/dashboard
            ${{ secrets.PRODUCTION_URL }}/quiz
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance budget check
        run: |
          echo "üìä Performance metrics collected"
          echo "üéØ Core Web Vitals monitoring active"

  rollback-plan:
    name: Rollback Plan
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-verification]
    if: failure()
    steps:
      - name: Prepare rollback
        run: |
          echo "üö® Deployment verification failed!"
          echo "üîÑ Rollback procedure:"
          echo "1. Use Vercel dashboard to revert to previous deployment"
          echo "2. Check database migrations if any were applied"
          echo "3. Verify all systems are operational"
          echo "4. Investigate and fix issues before next deployment"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-verification, performance-monitoring]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "üéâ Production deployment successful!"
          echo "üîó Production URL: ${{ secrets.PRODUCTION_URL }}"
          echo "‚úÖ All post-deployment checks passed"
          echo "üìä Performance monitoring active"
          echo "üõ°Ô∏è Security scans completed"