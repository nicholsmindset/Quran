'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Bell, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Users, 
  MessageSquare,
  X,
  Settings,
  Volume2,
  VolumeX,
  Filter
} from 'lucide-react';
import { cn } from '@/lib/cn';

interface Notification {
  id: string;
  type: 'urgent' | 'assignment' | 'collaboration' | 'system' | 'achievement';
  title: string;
  message: string;
  timestamp: Date;
  isRead: boolean;
  actionRequired?: boolean;
  metadata?: any;
}

interface RealtimeNotificationsProps {
  scholarId: string;
}

export function RealtimeNotifications({ scholarId }: RealtimeNotificationsProps) {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isExpanded, setIsExpanded] = useState(false);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [filter, setFilter] = useState<'all' | 'urgent' | 'unread'>('all');

  // Simulate real-time notifications
  useEffect(() => {
    const sampleNotifications: Notification[] = [
      {\n        id: '1',\n        type: 'urgent',\n        title: 'SLA Alert',\n        message: '3 questions are approaching deadline (< 2 hours remaining)',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000),\n        isRead: false,\n        actionRequired: true\n      },\n      {\n        id: '2',\n        type: 'collaboration',\n        title: 'Senior Scholar Request',\n        message: 'Dr. Ahmad requested consultation on hadith authenticity question',\n        timestamp: new Date(Date.now() - 15 * 60 * 1000),\n        isRead: false,\n        actionRequired: true\n      },\n      {\n        id: '3',\n        type: 'assignment',\n        title: 'New Batch Assigned',\n        message: '15 new questions assigned to your review queue',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000),\n        isRead: true,\n        actionRequired: false\n      },\n      {\n        id: '4',\n        type: 'achievement',\n        title: 'Quality Milestone',\n        message: 'Congratulations! You\\'ve maintained 95%+ accuracy for 30 days',\n        timestamp: new Date(Date.now() - 60 * 60 * 1000),\n        isRead: true,\n        actionRequired: false\n      },\n      {\n        id: '5',\n        type: 'system',\n        title: 'System Maintenance',\n        message: 'Scheduled maintenance tonight 2:00-4:00 AM',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        isRead: true,\n        actionRequired: false\n      }\n    ];\n\n    setNotifications(sampleNotifications);\n\n    // Simulate new notifications coming in\n    const interval = setInterval(() => {\n      const newNotification: Notification = {\n        id: Date.now().toString(),\n        type: Math.random() > 0.5 ? 'urgent' : 'assignment',\n        title: Math.random() > 0.5 ? 'New High Priority Question' : 'Collaboration Request',\n        message: Math.random() > 0.5 \n          ? 'A high-priority question about fiqh has been assigned to you'\n          : 'Another scholar is requesting your expertise',\n        timestamp: new Date(),\n        isRead: false,\n        actionRequired: Math.random() > 0.3\n      };\n\n      setNotifications(prev => [newNotification, ...prev].slice(0, 10));\n\n      // Play sound if enabled\n      if (soundEnabled && (newNotification.type === 'urgent' || newNotification.actionRequired)) {\n        // In a real app, play notification sound\n        console.log('ðŸ”” Notification sound');\n      }\n    }, 30000); // New notification every 30 seconds for demo\n\n    return () => clearInterval(interval);\n  }, [soundEnabled]);\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'urgent': return AlertTriangle;\n      case 'collaboration': return Users;\n      case 'assignment': return Bell;\n      case 'achievement': return CheckCircle;\n      case 'system': return Settings;\n      default: return Bell;\n    }\n  };\n\n  const getNotificationColor = (type: string, isRead: boolean) => {\n    const opacity = isRead ? 'opacity-70' : '';\n    switch (type) {\n      case 'urgent': return `bg-red-50 border-red-200 text-red-800 ${opacity}`;\n      case 'collaboration': return `bg-blue-50 border-blue-200 text-blue-800 ${opacity}`;\n      case 'assignment': return `bg-emerald-50 border-emerald-200 text-emerald-800 ${opacity}`;\n      case 'achievement': return `bg-yellow-50 border-yellow-200 text-yellow-800 ${opacity}`;\n      case 'system': return `bg-gray-50 border-gray-200 text-gray-800 ${opacity}`;\n      default: return `bg-gray-50 border-gray-200 text-gray-800 ${opacity}`;\n    }\n  };\n\n  const markAsRead = (notificationId: string) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === notificationId \n          ? { ...notification, isRead: true }\n          : notification\n      )\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, isRead: true }))\n    );\n  };\n\n  const dismissNotification = (notificationId: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  const filteredNotifications = notifications.filter(notification => {\n    switch (filter) {\n      case 'urgent': return notification.type === 'urgent' || notification.actionRequired;\n      case 'unread': return !notification.isRead;\n      default: return true;\n    }\n  });\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n  const urgentCount = notifications.filter(n => (n.type === 'urgent' || n.actionRequired) && !n.isRead).length;\n\n  return (\n    <Card className={cn(\n      \"transition-all duration-300\",\n      urgentCount > 0 && \"border-red-300 bg-red-50\",\n      isExpanded ? \"\" : \"cursor-pointer\"\n    )}>\n      <CardHeader \n        className=\"pb-3 cursor-pointer\" \n        onClick={() => !isExpanded && setIsExpanded(true)}\n      >\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            <div className=\"relative\">\n              <Bell className={cn(\n                \"h-4 w-4\",\n                urgentCount > 0 && \"text-red-600 animate-pulse\"\n              )} />\n              {unreadCount > 0 && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold\">\n                  {unreadCount > 9 ? '9+' : unreadCount}\n                </div>\n              )}\n            </div>\n            Notifications\n            {urgentCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs px-2 py-0 animate-pulse\">\n                {urgentCount} urgent\n              </Badge>\n            )}\n          </CardTitle>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Sound Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-6 w-6 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setSoundEnabled(!soundEnabled);\n              }}\n            >\n              {soundEnabled ? (\n                <Volume2 className=\"h-3 w-3\" />\n              ) : (\n                <VolumeX className=\"h-3 w-3\" />\n              )}\n            </Button>\n            \n            {/* Filter */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-6 w-6 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                const filters: Array<'all' | 'urgent' | 'unread'> = ['all', 'urgent', 'unread'];\n                const currentIndex = filters.indexOf(filter);\n                setFilter(filters[(currentIndex + 1) % filters.length]);\n              }}\n            >\n              <Filter className=\"h-3 w-3\" />\n            </Button>\n            \n            {/* Expand/Collapse */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"h-6 w-6 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setIsExpanded(!isExpanded);\n              }}\n            >\n              {isExpanded ? (\n                <X className=\"h-3 w-3\" />\n              ) : (\n                <Bell className=\"h-3 w-3\" />\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {!isExpanded && unreadCount > 0 && (\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            {urgentCount > 0 ? `${urgentCount} urgent, ` : ''}\n            {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}\n          </div>\n        )}\n      </CardHeader>\n      \n      {isExpanded && (\n        <CardContent className=\"space-y-3\">\n          {/* Filter Info */}\n          <div className=\"flex items-center justify-between pb-2 border-b border-gray-200\">\n            <div className=\"text-xs text-muted-foreground\">\n              Showing {filteredNotifications.length} {filter !== 'all' ? filter : ''} notifications\n            </div>\n            \n            {unreadCount > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-xs h-6\"\n                onClick={markAllAsRead}\n              >\n                Mark all read\n              </Button>\n            )}\n          </div>\n\n          {/* Notifications List */}\n          <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n            {filteredNotifications.length === 0 ? (\n              <div className=\"text-center py-6\">\n                <CheckCircle className=\"h-8 w-8 mx-auto mb-2 text-emerald-500\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  {filter === 'all' ? 'No notifications' : `No ${filter} notifications`}\n                </p>\n              </div>\n            ) : (\n              filteredNotifications.map((notification) => {\n                const NotificationIcon = getNotificationIcon(notification.type);\n                \n                return (\n                  <div \n                    key={notification.id}\n                    className={cn(\n                      \"p-3 rounded-lg border transition-all cursor-pointer\",\n                      getNotificationColor(notification.type, notification.isRead),\n                      !notification.isRead && \"border-l-4\",\n                      notification.actionRequired && \"shadow-sm\"\n                    )}\n                    onClick={() => !notification.isRead && markAsRead(notification.id)}\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"flex items-start gap-2 flex-1\">\n                        <NotificationIcon className={cn(\n                          \"h-4 w-4 mt-0.5 flex-shrink-0\",\n                          notification.type === 'urgent' && \"animate-pulse\"\n                        )} />\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2\">\n                            <h4 className=\"text-sm font-medium truncate\">\n                              {notification.title}\n                            </h4>\n                            {notification.actionRequired && (\n                              <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                                Action Required\n                              </Badge>\n                            )}\n                            {!notification.isRead && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\" />\n                            )}\n                          </div>\n                          \n                          <p className=\"text-xs mt-1 text-muted-foreground line-clamp-2\">\n                            {notification.message}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between mt-2\">\n                            <span className=\"text-xs text-muted-foreground\">\n                              {notification.timestamp.toLocaleTimeString([], {\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })}\n                            </span>\n                            \n                            {notification.actionRequired && (\n                              <div className=\"flex gap-1\">\n                                <Button variant=\"islamic\" size=\"sm\" className=\"text-xs px-2 py-1 h-6\">\n                                  Act\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-xs px-2 py-1 h-6\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    dismissNotification(notification.id);\n                                  }}\n                                >\n                                  Dismiss\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"h-6 w-6 p-0 flex-shrink-0\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          dismissNotification(notification.id);\n                        }}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n          \n          {/* Notification Settings */}\n          <div className=\"pt-2 border-t border-gray-200\">\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <span>Sound: {soundEnabled ? 'On' : 'Off'} â€¢ Filter: {filter}</span>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-xs h-6\">\n                <Settings className=\"h-3 w-3 mr-1\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}