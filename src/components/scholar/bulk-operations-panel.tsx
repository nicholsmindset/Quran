'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';\nimport {\n  CheckCircle,\n  XCircle,\n  Edit3,\n  Flag,\n  Users,\n  Clock,\n  Target,\n  BookOpen,\n  AlertTriangle,\n  MessageSquare,\n  Archive,\n  Download,\n  Upload,\n  Zap,\n  Filter,\n  Tag\n} from 'lucide-react';\nimport { cn } from '@/lib/cn';\n\n// Simple select component\nconst SimpleSelect = ({ value, onValueChange, children, placeholder }: {\n  value: string;\n  onValueChange: (value: string) => void;\n  children: React.ReactNode;\n  placeholder?: string;\n}) => (\n  <select\n    value={value}\n    onChange={(e) => onValueChange(e.target.value)}\n    className=\"flex h-9 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2\"\n  >\n    {placeholder && <option value=\"\">{placeholder}</option>}\n    {children}\n  </select>\n);\n\ninterface BulkOperationsPanelProps {\n  selectedQuestions: string[];\n  onBulkOperation: (params: { action: string; questionIds: string[]; data?: any }) => void;\n  isLoading: boolean;\n}\n\ninterface BulkOperationConfig {\n  action: string;\n  priority?: string;\n  difficulty?: string;\n  topic?: string;\n  notes?: string;\n  assignTo?: string;\n  deadline?: string;\n  reason?: string;\n  flagConcern?: string;\n}\n\nexport function BulkOperationsPanel({ \n  selectedQuestions, \n  onBulkOperation, \n  isLoading \n}: BulkOperationsPanelProps) {\n  const [activeOperation, setActiveOperation] = useState<string>('');\n  const [operationConfig, setOperationConfig] = useState<BulkOperationConfig>({} as BulkOperationConfig);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n\n  const bulkOperations = [\n    {\n      id: 'approve',\n      label: 'Bulk Approve',\n      icon: CheckCircle,\n      color: 'bg-emerald-500 text-white hover:bg-emerald-600',\n      description: 'Approve all selected questions with optional batch notes',\n      requiresConfig: false,\n      dangerous: false\n    },\n    {\n      id: 'reject',\n      label: 'Bulk Reject',\n      icon: XCircle,\n      color: 'bg-red-500 text-white hover:bg-red-600',\n      description: 'Reject selected questions with specified reason',\n      requiresConfig: true,\n      dangerous: true\n    },\n    {\n      id: 'edit_difficulty',\n      label: 'Change Difficulty',\n      icon: Target,\n      color: 'bg-blue-500 text-white hover:bg-blue-600',\n      description: 'Update difficulty level for selected questions',\n      requiresConfig: true,\n      dangerous: false\n    },\n    {\n      id: 'assign_topic',\n      label: 'Assign Topic',\n      icon: Tag,\n      color: 'bg-purple-500 text-white hover:bg-purple-600',\n      description: 'Categorize questions with Islamic topic tags',\n      requiresConfig: true,\n      dangerous: false\n    },\n    {\n      id: 'flag_review',\n      label: 'Flag for Review',\n      icon: Flag,\n      color: 'bg-yellow-500 text-white hover:bg-yellow-600',\n      description: 'Flag questions for senior scholar review',\n      requiresConfig: true,\n      dangerous: false\n    },\n    {\n      id: 'assign_scholar',\n      label: 'Reassign',\n      icon: Users,\n      color: 'bg-indigo-500 text-white hover:bg-indigo-600',\n      description: 'Assign questions to specific scholar',\n      requiresConfig: true,\n      dangerous: false\n    },\n    {\n      id: 'set_priority',\n      label: 'Set Priority',\n      icon: AlertTriangle,\n      color: 'bg-orange-500 text-white hover:bg-orange-600',\n      description: 'Change priority level for selected questions',\n      requiresConfig: true,\n      dangerous: false\n    },\n    {\n      id: 'create_batch',\n      label: 'Create Review Batch',\n      icon: Archive,\n      color: 'bg-gray-600 text-white hover:bg-gray-700',\n      description: 'Group questions into a timed review batch',\n      requiresConfig: true,\n      dangerous: false\n    }\n  ];\n\n  const handleConfigChange = (key: keyof BulkOperationConfig, value: string) => {\n    setOperationConfig(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleExecute = () => {\n    if (!activeOperation) return;\n    \n    const operation = bulkOperations.find(op => op.id === activeOperation);\n    if (!operation) return;\n\n    // Prepare operation data based on the selected operation\n    let operationData = { ...operationConfig };\n    \n    // Add operation-specific validation and data preparation\n    switch (activeOperation) {\n      case 'reject':\n        if (!operationConfig.reason?.trim()) {\n          alert('Please provide a rejection reason');\n          return;\n        }\n        break;\n      case 'flag_review':\n        if (!operationConfig.flagConcern?.trim()) {\n          alert('Please specify the concern for flagging');\n          return;\n        }\n        break;\n      case 'assign_scholar':\n        if (!operationConfig.assignTo) {\n          alert('Please select a scholar to assign to');\n          return;\n        }\n        break;\n    }\n\n    onBulkOperation({\n      action: activeOperation,\n      questionIds: selectedQuestions,\n      data: operationData\n    });\n\n    // Reset after execution\n    setActiveOperation('');\n    setOperationConfig({});\n  };\n\n  const renderOperationConfig = () => {\n    if (!activeOperation) return null;\n\n    const operation = bulkOperations.find(op => op.id === activeOperation);\n    if (!operation?.requiresConfig) return null;\n\n    return (\n      <div className=\"space-y-4 mt-4 p-4 bg-gray-50 rounded-lg border\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"font-medium text-gray-900\">Configuration for {operation.label}</h4>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => setShowAdvanced(!showAdvanced)}\n          >\n            {showAdvanced ? 'Simple' : 'Advanced'}\n          </Button>\n        </div>\n\n        {/* Operation-specific configuration */}\n        {activeOperation === 'reject' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"rejection-reason\">Rejection Reason *</Label>\n              <textarea\n                id=\"rejection-reason\"\n                className=\"w-full mt-1 p-2 border rounded-md resize-none focus:ring-2 focus:ring-emerald-500\"\n                rows={3}\n                placeholder=\"Explain why these questions are being rejected...\"\n                value={operationConfig.reason || ''}\n                onChange={(e) => handleConfigChange('reason', e.target.value)}\n              />\n            </div>\n            {showAdvanced && (\n              <div>\n                <Label htmlFor=\"rejection-notes\">Additional Notes (Optional)</Label>\n                <Input\n                  id=\"rejection-notes\"\n                  placeholder=\"Any additional context for the rejection\"\n                  value={operationConfig.notes || ''}\n                  onChange={(e) => handleConfigChange('notes', e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'edit_difficulty' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label>New Difficulty Level *</Label>\n              <SimpleSelect\n                value={operationConfig.difficulty || ''}\n                onValueChange={(value) => handleConfigChange('difficulty', value)}\n                placeholder=\"Select difficulty level\"\n              >\n                <option value=\"easy\">Easy - Beginner Level</option>\n                <option value=\"medium\">Medium - Intermediate Level</option>\n                <option value=\"hard\">Hard - Advanced Level</option>\n              </SimpleSelect>\n            </div>\n            {showAdvanced && (\n              <div>\n                <Label htmlFor=\"difficulty-notes\">Reason for Change</Label>\n                <Input\n                  id=\"difficulty-notes\"\n                  placeholder=\"Why is the difficulty being changed?\"\n                  value={operationConfig.notes || ''}\n                  onChange={(e) => handleConfigChange('notes', e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'assign_topic' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label>Islamic Topic Category *</Label>\n              <SimpleSelect\n                value={operationConfig.topic || ''}\n                onValueChange={(value) => handleConfigChange('topic', value)}\n                placeholder=\"Select Islamic topic\"\n              >\n                <option value=\"aqeedah\">Aqeedah (Creed & Belief)</option>\n                <option value=\"fiqh\">Fiqh (Islamic Jurisprudence)</option>\n                <option value=\"seerah\">Seerah (Prophet's Biography)</option>\n                <option value=\"tafsir\">Tafsir (Quranic Interpretation)</option>\n                <option value=\"hadith\">Hadith (Prophetic Traditions)</option>\n                <option value=\"akhlaq\">Akhlaq (Islamic Ethics)</option>\n                <option value=\"tarikh\">Tarikh (Islamic History)</option>\n                <option value=\"adab\">Adab (Islamic Etiquette)</option>\n              </SimpleSelect>\n            </div>\n            {showAdvanced && (\n              <div>\n                <Label htmlFor=\"topic-notes\">Topic-specific Notes</Label>\n                <Input\n                  id=\"topic-notes\"\n                  placeholder=\"Additional context about the topic assignment\"\n                  value={operationConfig.notes || ''}\n                  onChange={(e) => handleConfigChange('notes', e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'flag_review' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"flag-concern\">Concern/Issue *</Label>\n              <textarea\n                id=\"flag-concern\"\n                className=\"w-full mt-1 p-2 border rounded-md resize-none focus:ring-2 focus:ring-emerald-500\"\n                rows={3}\n                placeholder=\"Describe the concern requiring senior scholar review...\"\n                value={operationConfig.flagConcern || ''}\n                onChange={(e) => handleConfigChange('flagConcern', e.target.value)}\n              />\n            </div>\n            {showAdvanced && (\n              <div>\n                <Label>Urgency Level</Label>\n                <SimpleSelect\n                  value={operationConfig.priority || 'medium'}\n                  onValueChange={(value) => handleConfigChange('priority', value)}\n                >\n                  <option value=\"low\">Low - Review when convenient</option>\n                  <option value=\"medium\">Medium - Review within 24h</option>\n                  <option value=\"high\">High - Urgent review needed</option>\n                </SimpleSelect>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'assign_scholar' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label>Assign to Scholar *</Label>\n              <SimpleSelect\n                value={operationConfig.assignTo || ''}\n                onValueChange={(value) => handleConfigChange('assignTo', value)}\n                placeholder=\"Select scholar\"\n              >\n                <option value=\"dr_ahmad\">Dr. Ahmad Hassan (Fiqh Specialist)</option>\n                <option value=\"sheikh_omar\">Sheikh Omar Ali (Hadith Expert)</option>\n                <option value=\"dr_fatima\">Dr. Fatima Khan (Tafsir Scholar)</option>\n                <option value=\"imam_yusuf\">Imam Yusuf (Aqeedah Specialist)</option>\n              </SimpleSelect>\n            </div>\n            {showAdvanced && (\n              <div className=\"space-y-2\">\n                <div>\n                  <Label htmlFor=\"assignment-deadline\">Deadline (Optional)</Label>\n                  <Input\n                    id=\"assignment-deadline\"\n                    type=\"datetime-local\"\n                    value={operationConfig.deadline || ''}\n                    onChange={(e) => handleConfigChange('deadline', e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"assignment-notes\">Assignment Notes</Label>\n                  <Input\n                    id=\"assignment-notes\"\n                    placeholder=\"Special instructions for the assigned scholar\"\n                    value={operationConfig.notes || ''}\n                    onChange={(e) => handleConfigChange('notes', e.target.value)}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'set_priority' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label>New Priority Level *</Label>\n              <SimpleSelect\n                value={operationConfig.priority || ''}\n                onValueChange={(value) => handleConfigChange('priority', value)}\n                placeholder=\"Select priority level\"\n              >\n                <option value=\"low\">Low Priority</option>\n                <option value=\"medium\">Medium Priority</option>\n                <option value=\"high\">High Priority - Urgent</option>\n              </SimpleSelect>\n            </div>\n            {showAdvanced && (\n              <div>\n                <Label htmlFor=\"priority-notes\">Reason for Priority Change</Label>\n                <Input\n                  id=\"priority-notes\"\n                  placeholder=\"Why is the priority being changed?\"\n                  value={operationConfig.notes || ''}\n                  onChange={(e) => handleConfigChange('notes', e.target.value)}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeOperation === 'create_batch' && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"batch-name\">Batch Name *</Label>\n              <Input\n                id=\"batch-name\"\n                placeholder=\"e.g., 'Fiqh Questions - Week 1'\"\n                value={operationConfig.notes || ''}\n                onChange={(e) => handleConfigChange('notes', e.target.value)}\n              />\n            </div>\n            {showAdvanced && (\n              <div className=\"space-y-2\">\n                <div>\n                  <Label htmlFor=\"batch-deadline\">Batch Deadline</Label>\n                  <Input\n                    id=\"batch-deadline\"\n                    type=\"datetime-local\"\n                    value={operationConfig.deadline || ''}\n                    onChange={(e) => handleConfigChange('deadline', e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label>Batch Priority</Label>\n                  <SimpleSelect\n                    value={operationConfig.priority || 'medium'}\n                    onValueChange={(value) => handleConfigChange('priority', value)}\n                  >\n                    <option value=\"low\">Low Priority</option>\n                    <option value=\"medium\">Medium Priority</option>\n                    <option value=\"high\">High Priority</option>\n                  </SimpleSelect>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold flex items-center gap-2 text-blue-800\">\n            <Zap className=\"h-5 w-5\" />\n            Bulk Operations\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              {selectedQuestions.length} selected\n            </Badge>\n          </CardTitle>\n          \n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setPreviewMode(!previewMode)}\n            >\n              {previewMode ? 'Live' : 'Preview'} Mode\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Selection\n            </Button>\n          </div>\n        </div>\n        \n        <p className=\"text-sm text-blue-700\">\n          Efficiently process multiple questions with batch operations. Changes apply to all selected questions.\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3\">\n          {bulkOperations.map((operation) => {\n            const Icon = operation.icon;\n            const isActive = activeOperation === operation.id;\n            const isDisabled = selectedQuestions.length === 0;\n            \n            return (\n              <Button\n                key={operation.id}\n                variant={isActive ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className={cn(\n                  \"flex flex-col items-center gap-2 h-auto py-3 px-2 text-xs\",\n                  isActive && operation.color,\n                  isDisabled && \"opacity-50 cursor-not-allowed\",\n                  operation.dangerous && !isActive && \"border-red-200 text-red-700 hover:bg-red-50\"\n                )}\n                onClick={() => setActiveOperation(isActive ? '' : operation.id)}\n                disabled={isDisabled || isLoading}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span className=\"text-center leading-tight\">{operation.label}</span>\n                {operation.dangerous && (\n                  <Badge variant=\"destructive\" className=\"text-xs px-1 py-0\">\n                    ⚠\n                  </Badge>\n                )}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Operation Description */}\n        {activeOperation && (\n          <div className=\"p-3 bg-white rounded-lg border border-blue-200\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              {(() => {\n                const operation = bulkOperations.find(op => op.id === activeOperation);\n                const Icon = operation?.icon || CheckCircle;\n                return <Icon className=\"h-4 w-4 text-blue-600\" />;\n              })()} \n              <span className=\"font-medium text-blue-800\">\n                {bulkOperations.find(op => op.id === activeOperation)?.label}\n              </span>\n            </div>\n            <p className=\"text-sm text-blue-700\">\n              {bulkOperations.find(op => op.id === activeOperation)?.description}\n            </p>\n          </div>\n        )}\n\n        {/* Operation Configuration */}\n        {renderOperationConfig()}\n\n        {/* Preview Mode */}\n        {previewMode && activeOperation && (\n          <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Eye className=\"h-4 w-4 text-yellow-600\" />\n              <span className=\"font-medium text-yellow-800\">Preview Mode</span>\n            </div>\n            <p className=\"text-sm text-yellow-700 mb-3\">\n              This operation will affect {selectedQuestions.length} questions:\n            </p>\n            <div className=\"text-xs text-yellow-600 space-y-1\">\n              <div>• Action: {bulkOperations.find(op => op.id === activeOperation)?.label}</div>\n              {operationConfig.priority && <div>• Priority: {operationConfig.priority}</div>}\n              {operationConfig.difficulty && <div>• Difficulty: {operationConfig.difficulty}</div>}\n              {operationConfig.topic && <div>• Topic: {operationConfig.topic}</div>}\n              {operationConfig.reason && <div>• Reason: {operationConfig.reason.substring(0, 50)}...</div>}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        {activeOperation && (\n          <div className=\"flex items-center justify-between pt-4 border-t border-blue-200\">\n            <div className=\"flex items-center gap-2 text-sm text-blue-700\">\n              <Clock className=\"h-4 w-4\" />\n              <span>Estimated time: ~{Math.ceil(selectedQuestions.length / 10)} minutes</span>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setActiveOperation('');\n                  setOperationConfig({});\n                }}\n                disabled={isLoading}\n              >\n                Cancel\n              </Button>\n              \n              <Button\n                variant=\"islamic\"\n                size=\"sm\"\n                onClick={handleExecute}\n                disabled={isLoading || selectedQuestions.length === 0}\n                className=\"min-w-24\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\" />\n                    Processing...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    Execute ({selectedQuestions.length})\n                  </div>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        {/* Keyboard Shortcuts Help */}\n        <div className=\"text-xs text-muted-foreground pt-2 border-t border-blue-100\">\n          💡 Shortcuts: Ctrl+A (select all) • Ctrl+R (refresh) • Ctrl+S (save work) • ESC (cancel operation)\n        </div>\n      </CardContent>\n    </Card>\n  );\n}