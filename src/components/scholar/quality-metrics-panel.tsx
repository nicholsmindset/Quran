'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';\nimport {\n  BarChart3,\n  Target,\n  TrendingUp,\n  Award,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Star,\n  Eye,\n  BookOpen,\n  Users,\n  Activity,\n  Zap,\n  Filter,\n  Calendar,\n  Download\n} from 'lucide-react';\nimport { cn } from '@/lib/cn';\n\ninterface QualityMetric {\n  id: string;\n  name: string;\n  value: number;\n  target: number;\n  trend: 'up' | 'down' | 'stable';\n  trendValue: number;\n  description: string;\n  category: 'accuracy' | 'efficiency' | 'quality' | 'collaboration';\n}\n\ninterface QualityMetricsPanelProps {\n  scholarId: string;\n  stats: any;\n}\n\nexport function QualityMetricsPanel({ scholarId, stats }: QualityMetricsPanelProps) {\n  const [selectedPeriod, setSelectedPeriod] = useState<'daily' | 'weekly' | 'monthly'>('weekly');\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'accuracy' | 'efficiency' | 'quality' | 'collaboration'>('all');\n  const [metrics, setMetrics] = useState<QualityMetric[]>([]);\n  const [achievements, setAchievements] = useState<any[]>([]);\n  const [improvementAreas, setImprovementAreas] = useState<any[]>([]);\n\n  useEffect(() => {\n    // Simulate quality metrics data\n    const sampleMetrics: QualityMetric[] = [\n      {\n        id: 'accuracy_rate',\n        name: 'Accuracy Rate',\n        value: 94.5,\n        target: 90,\n        trend: 'up',\n        trendValue: 2.3,\n        description: 'Percentage of correctly reviewed questions',\n        category: 'accuracy'\n      },\n      {\n        id: 'consistency_score',\n        name: 'Consistency Score',\n        value: 91.2,\n        target: 85,\n        trend: 'up',\n        trendValue: 1.8,\n        description: 'Consistency in applying review criteria',\n        category: 'quality'\n      },\n      {\n        id: 'processing_speed',\n        name: 'Avg Processing Time',\n        value: 3.2, // minutes\n        target: 4.0,\n        trend: 'down', // lower is better for time\n        trendValue: -0.8,\n        description: 'Average time to complete question review',\n        category: 'efficiency'\n      },\n      {\n        id: 'sla_compliance',\n        name: 'SLA Compliance',\n        value: 96.8,\n        target: 95,\n        trend: 'up',\n        trendValue: 1.2,\n        description: 'Questions completed within 24h deadline',\n        category: 'efficiency'\n      },\n      {\n        id: 'complexity_handling',\n        name: 'Complex Question Success',\n        value: 87.5,\n        target: 80,\n        trend: 'up',\n        trendValue: 3.5,\n        description: 'Success rate on high-difficulty questions',\n        category: 'quality'\n      },\n      {\n        id: 'collaboration_rating',\n        name: 'Peer Collaboration',\n        value: 4.7, // out of 5\n        target: 4.0,\n        trend: 'up',\n        trendValue: 0.3,\n        description: 'Rating from fellow scholars',\n        category: 'collaboration'\n      },\n      {\n        id: 'error_reduction',\n        name: 'Error Reduction Rate',\n        value: 12.5, // percentage improvement\n        target: 10,\n        trend: 'up',\n        trendValue: 2.5,\n        description: 'Reduction in review errors over time',\n        category: 'quality'\n      },\n      {\n        id: 'feedback_incorporation',\n        name: 'Feedback Integration',\n        value: 93.0,\n        target: 85,\n        trend: 'stable',\n        trendValue: 0.1,\n        description: 'How well feedback is incorporated',\n        category: 'quality'\n      }\n    ];\n\n    const sampleAchievements = [\n      {\n        id: 'streak_30',\n        title: '30-Day Excellence Streak',\n        description: 'Maintained 95%+ accuracy for 30 consecutive days',\n        icon: Award,\n        color: 'text-yellow-600 bg-yellow-50',\n        earnedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n      },\n      {\n        id: 'speed_master',\n        title: 'Efficiency Master',\n        description: 'Average review time under 3 minutes',\n        icon: Zap,\n        color: 'text-blue-600 bg-blue-50',\n        earnedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)\n      },\n      {\n        id: 'mentor_recognition',\n        title: 'Mentor Recognition',\n        description: 'Helped 5+ fellow scholars this month',\n        icon: Users,\n        color: 'text-purple-600 bg-purple-50',\n        earnedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    const sampleImprovementAreas = [\n      {\n        area: 'Hadith Classification',\n        currentScore: 78.5,\n        targetScore: 85,\n        priority: 'medium',\n        suggestion: 'Consider additional training on hadith grading criteria',\n        resources: ['Advanced Hadith Sciences Course', 'Peer Consultation Program']\n      },\n      {\n        area: 'Contemporary Fiqh Issues',\n        currentScore: 82.1,\n        targetScore: 90,\n        priority: 'low',\n        suggestion: 'Review modern jurisprudential opinions on current issues',\n        resources: ['Modern Fiqh Compendium', 'Scholar Workshop Series']\n      }\n    ];\n\n    setMetrics(sampleMetrics);\n    setAchievements(sampleAchievements);\n    setImprovementAreas(sampleImprovementAreas);\n  }, [selectedPeriod]);\n\n  const filteredMetrics = selectedCategory === 'all' \n    ? metrics \n    : metrics.filter(m => m.category === selectedCategory);\n\n  const getMetricColor = (value: number, target: number, isTimeMetric = false) => {\n    if (isTimeMetric) {\n      // For time metrics, lower is better\n      return value <= target ? 'text-emerald-600' : value <= target * 1.2 ? 'text-yellow-600' : 'text-red-600';\n    } else {\n      // For other metrics, higher is better\n      return value >= target ? 'text-emerald-600' : value >= target * 0.8 ? 'text-yellow-600' : 'text-red-600';\n    }\n  };\n\n  const getMetricProgress = (value: number, target: number, isTimeMetric = false) => {\n    if (isTimeMetric) {\n      // For time metrics, calculate how close to target (lower is better)\n      return Math.min(100, (target / value) * 100);\n    } else {\n      // For other metrics, calculate percentage of target achieved\n      return Math.min(100, (value / target) * 100);\n    }\n  };\n\n  const getTrendIcon = (trend: string, trendValue: number) => {\n    if (trend === 'up') {\n      return <TrendingUp className={cn(\"h-3 w-3\", trendValue > 0 ? \"text-emerald-500\" : \"text-red-500\")} />;\n    } else if (trend === 'down') {\n      return <TrendingUp className={cn(\"h-3 w-3 rotate-180\", trendValue < 0 ? \"text-emerald-500\" : \"text-red-500\")} />;\n    } else {\n      return <Activity className=\"h-3 w-3 text-gray-500\" />;\n    }\n  };\n\n  const overallScore = filteredMetrics.reduce((acc, metric) => {\n    const isTimeMetric = metric.id.includes('time');\n    const progress = getMetricProgress(metric.value, metric.target, isTimeMetric);\n    return acc + progress;\n  }, 0) / filteredMetrics.length;\n\n  return (\n    <Card className=\"border-emerald-200 bg-gradient-to-br from-emerald-50 to-green-50\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2 text-emerald-800\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Quality & Performance Metrics\n            <Badge \n              variant={overallScore >= 90 ? 'default' : overallScore >= 75 ? 'secondary' : 'destructive'} \n              className=\"ml-2\"\n            >\n              {Math.round(overallScore)}% Overall\n            </Badge>\n          </CardTitle>\n          \n          <div className=\"flex gap-2\">\n            <div className=\"flex items-center gap-1 bg-white px-2 py-1 rounded-md border\">\n              <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n              <select\n                className=\"text-xs border-none bg-transparent focus:outline-none\"\n                value={selectedPeriod}\n                onChange={(e) => setSelectedPeriod(e.target.value as any)}\n              >\n                <option value=\"daily\">Daily</option>\n                <option value=\"weekly\">Weekly</option>\n                <option value=\"monthly\">Monthly</option>\n              </select>\n            </div>\n            \n            <div className=\"flex items-center gap-1 bg-white px-2 py-1 rounded-md border\">\n              <Filter className=\"h-3 w-3 text-muted-foreground\" />\n              <select\n                className=\"text-xs border-none bg-transparent focus:outline-none\"\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value as any)}\n              >\n                <option value=\"all\">All Metrics</option>\n                <option value=\"accuracy\">Accuracy</option>\n                <option value=\"efficiency\">Efficiency</option>\n                <option value=\"quality\">Quality</option>\n                <option value=\"collaboration\">Collaboration</option>\n              </select>\n            </div>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Key Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {filteredMetrics.map((metric) => {\n            const isTimeMetric = metric.id.includes('time');\n            const progress = getMetricProgress(metric.value, metric.target, isTimeMetric);\n            const colorClass = getMetricColor(metric.value, metric.target, isTimeMetric);\n            \n            return (\n              <Card key={metric.id} className=\"bg-white border border-gray-200\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"text-sm font-medium text-gray-900\">{metric.name}</h4>\n                    <div className=\"flex items-center gap-1\">\n                      {getTrendIcon(metric.trend, metric.trendValue)}\n                      <span className={cn(\n                        \"text-xs font-medium\",\n                        metric.trendValue > 0 ? \"text-emerald-600\" : \"text-red-600\"\n                      )}>\n                        {metric.trendValue > 0 ? '+' : ''}{metric.trendValue}{isTimeMetric ? 'min' : '%'}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className={cn(\"text-2xl font-bold mb-1\", colorClass)}>\n                    {isTimeMetric ? `${metric.value}min` : `${metric.value}${metric.id === 'collaboration_rating' ? '/5' : '%'}`}\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground mb-3\">\n                    Target: {isTimeMetric ? `<${metric.target}min` : `${metric.target}${metric.id === 'collaboration_rating' ? '/5' : '%'}`}\n                  </div>\n                  \n                  <Progress value={progress} className=\"h-2 mb-2\" />\n                  \n                  <p className=\"text-xs text-muted-foreground\">\n                    {metric.description}\n                  </p>\n                  \n                  {/* Category badge */}\n                  <Badge \n                    variant=\"outline\" \n                    className={cn(\n                      \"mt-2 text-xs\",\n                      metric.category === 'accuracy' ? \"border-blue-200 text-blue-600\" :\n                      metric.category === 'efficiency' ? \"border-green-200 text-green-600\" :\n                      metric.category === 'quality' ? \"border-purple-200 text-purple-600\" :\n                      \"border-orange-200 text-orange-600\"\n                    )}\n                  >\n                    {metric.category}\n                  </Badge>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Achievement & Recognition Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Achievements */}\n          <Card className=\"bg-white\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Award className=\"h-4 w-4 text-yellow-600\" />\n                Recent Achievements\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {achievements.length === 0 ? (\n                <div className=\"text-center py-6\">\n                  <Star className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Keep up the great work to earn achievements!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {achievements.map((achievement) => {\n                    const Icon = achievement.icon;\n                    return (\n                      <div \n                        key={achievement.id}\n                        className={cn(\n                          \"p-3 rounded-lg border\",\n                          achievement.color\n                        )}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 rounded-full bg-white bg-opacity-50\">\n                            <Icon className=\"h-4 w-4\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-sm\">{achievement.title}</h4>\n                            <p className=\"text-xs opacity-80\">{achievement.description}</p>\n                            <p className=\"text-xs opacity-60 mt-1\">\n                              Earned {achievement.earnedAt.toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  \n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-3\">\n                    <Eye className=\"h-3 w-3 mr-2\" />\n                    View All Achievements\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Improvement Areas */}\n          <Card className=\"bg-white\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Target className=\"h-4 w-4 text-blue-600\" />\n                Growth Opportunities\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {improvementAreas.length === 0 ? (\n                <div className=\"text-center py-6\">\n                  <CheckCircle className=\"h-8 w-8 mx-auto mb-2 text-emerald-500\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Excellent performance across all areas!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {improvementAreas.map((area, index) => (\n                    <div key={index} className=\"p-3 border rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-sm\">{area.area}</h4>\n                        <Badge \n                          variant={area.priority === 'high' ? 'destructive' : \n                                  area.priority === 'medium' ? 'secondary' : 'outline'}\n                          className=\"text-xs\"\n                        >\n                          {area.priority} priority\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className=\"text-xs text-muted-foreground\">Current:</span>\n                        <span className=\"text-xs font-medium\">{area.currentScore}%</span>\n                        <span className=\"text-xs text-muted-foreground\">Target:</span>\n                        <span className=\"text-xs font-medium text-emerald-600\">{area.targetScore}%</span>\n                      </div>\n                      \n                      <Progress \n                        value={(area.currentScore / area.targetScore) * 100} \n                        className=\"h-2 mb-2\" \n                      />\n                      \n                      <p className=\"text-xs text-muted-foreground mb-2\">\n                        {area.suggestion}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {area.resources.map((resource: string, resourceIndex: number) => (\n                          <Badge \n                            key={resourceIndex} \n                            variant=\"outline\" \n                            className=\"text-xs cursor-pointer hover:bg-gray-50\"\n                          >\n                            <BookOpen className=\"h-2 w-2 mr-1\" />\n                            {resource}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Performance Insights */}\n        <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2 text-blue-800\">\n              <Activity className=\"h-4 w-4\" />\n              AI-Powered Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-blue-800 flex items-center gap-1\">\n                  <CheckCircle className=\"h-3 w-3\" />\n                  Strengths\n                </h4>\n                <ul className=\"text-xs text-blue-700 space-y-1\">\n                  <li>• Exceptional accuracy in Fiqh-related questions</li>\n                  <li>• Consistently meets SLA requirements</li>\n                  <li>• Strong peer collaboration and mentoring</li>\n                  <li>• Effective at complex question analysis</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-blue-800 flex items-center gap-1\">\n                  <AlertTriangle className=\"h-3 w-3\" />\n                  Recommendations\n                </h4>\n                <ul className=\"text-xs text-blue-700 space-y-1\">\n                  <li>• Consider additional hadith authentication training</li>\n                  <li>• Participate in contemporary issues workshops</li>\n                  <li>• Share expertise through mentorship program</li>\n                  <li>• Document best practices for team knowledge</li>\n                </ul>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-white bg-opacity-50 rounded-md\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-xs text-blue-700\">\n                  <strong>Next Review:</strong> Your performance will be evaluated in 2 weeks\n                </p>\n                <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  Schedule 1:1\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Quality Score Breakdown */}\n        <div className=\"text-center pt-4 border-t border-emerald-200\">\n          <div className=\"flex items-center justify-center gap-6 text-sm text-emerald-700\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 bg-emerald-500 rounded-full\" />\n              <span>Excellence (90-100%)</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n              <span>Good (75-89%)</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n              <span>Needs Improvement (<75%)</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}